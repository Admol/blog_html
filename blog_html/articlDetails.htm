<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->
    <title>文章详情</title>

    <!-- Bootstrap -->
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="css/index.css">
    <!--[if lt IE 9]>
      <script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    <link rel="icon" href="img/monkey.ico">
  </head>
  <body>

  <!-- 导航菜单开始 -->
  <nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <!-- 缩略导航-三横线图标 -->
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <!--品牌图标-->
       <!--  <img alt="Brand" src="img/monkey.ico"> -->
        <a class="navbar-brand" href="#">Admol</a>
      </div>

     
      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav">
          <li class="active">
            <a href="#">首页 </a>
          </li>
          <li><a href="#">统计</a></li>
          <li><a href="#">关于</a></li>
        </ul>
        <form class="navbar-form navbar-left" role="search">
          <div class="form-group">
            <input type="text" class="form-control" placeholder="搜索文章">
          </div>
        </form>
        <ul class="nav navbar-nav navbar-right">
          <li><a href="#" style="color: rgba(51, 122, 183, 0.75);">登录</a></li>
        </ul>
      </div>
    </div>
  </nav>
  <!-- 导航菜单结束 -->


 <div class="container">
    <div class="row">
      <div class="articl-postsection">
        <a class="articlTitleA">虚拟机类加载机制1</a>
        <br>
        <p class="article-author">
          <span class="glyphicon glyphicon-time" aria-hidden="true"></span> 发表于
          <a class="articletype"href="/articletype" title="分类" target="_blank" itemprop="articletype">Java </a>
          <time datetime="2016-13-30T08:22:52.000Z" itemprop="datePublished"> 2016-07-30</time>
          By <a class="author"href="/about" title="admol" target="_blank" itemprop="author">admol</a>
        </p>
        <hr class="diveder">
        <div class="article-content">
    
    <div id="toc" class="toc-article">
      <strong class="toc-title">文章目录</strong>
    
      <ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#类生命周期"><span class="toc-number">1.</span> <span class="toc-text">类生命周期</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#第一阶段:加载"><span class="toc-number">1.1.</span> <span class="toc-text">第一阶段:加载</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#第二阶段:验证"><span class="toc-number">1.2.</span> <span class="toc-text">第二阶段:验证</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#第三阶段:准备"><span class="toc-number">1.3.</span> <span class="toc-text">第三阶段:准备</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#第四阶段:解析"><span class="toc-number">1.4.</span> <span class="toc-text">第四阶段:解析</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#第五阶段:初始化"><span class="toc-number">1.5.</span> <span class="toc-text">第五阶段:初始化</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#类加载器"><span class="toc-number">2.</span> <span class="toc-text">类加载器</span></a></li></ol>
    
    </div>
    
    <p><strong>虚拟机把描述类的数据从Class文件加载到内存,并对数据进行校验、转换解析和初始化,最终形成可以被虚拟机直接使用的Java类型,这就是虚拟机的类加载机制</strong></p>
<h2 id="类生命周期">类生命周期</h2><p>加载(Loading)验证(Verification) 准备(Preparation) 解析(Resolution) 初始化(Initialization) 使用(Using)  卸载(Unloading)</p>
<h3 id="第一阶段:加载">第一阶段:加载</h3><p>虚拟机规范中没有约束什么时候需要开始加载类,具体是根据虚拟机的具体实现来自由把握什么时候加载类.在加載阶段,虚拟机需要完成以下三件事情:</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流.</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.</li>
<li>在java堆中生成一个代表这个类的java.lang.Class对象,最为方法区这些数据的访问入口</li>
</ol>
<h3 id="第二阶段:验证">第二阶段:验证</h3><p>验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机的自身安全<br>不同的虚拟机对类验证的实现可能会有所不同,但大致都会完成四个阶段的验证过程:</p>
<ol>
<li>文件格式验证</li>
<li>元数据验证</li>
<li>字节码验证</li>
<li>符号引用验证</li>
</ol>
<h3 id="第三阶段:准备">第三阶段:准备</h3><p>准备是正式为类变量分配内存并设置类变量初始化值的阶段(仅包括被static修饰的变量,不包括实例变量),假如一个类变量定义如下:<br><code>public staic int value=123;</code><br>那么变量value在准备阶段过后的初始值为0而不是123.<br>特殊情况,假如一个类变量定义如下:<br><code>public staic final int value=123;</code><br>在准备阶段,变量value会被赋值为123</p>
<h3 id="第四阶段:解析">第四阶段:解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p>
<h3 id="第五阶段:初始化">第五阶段:初始化</h3><p>类初始化阶段是类加载过程的最后一步,虚拟机规定了有且只有4种情况必须立即对类进行初始化(加载、验证、准备续在此之前):</p>
<ol>
<li><p>遇到new 、getstatic 、 putstatic 、invokestatic 这4条字节码指令时,如果类没有初始化,则需要先触发其初始化(场景:使用new关键字实例化对象的时候、读取或设置一个类的静态字段(被final修饰,已存在编译期把结果放入常量池的静态字段除外)的时候、以及调用一个类的静态方法的时候)</p>
</li>
<li><p>使用java.lang.reflect 包的方法对类进行反射调用的时候,如果类没有进行初始化,需要触发其初始化.</p>
</li>
<li><p>当初始化一个类的时候,发现其父类还没有进行过初始化的时候,需要触发其初始化(接口除外,只有在使用到其父类接口时才会初始化).</p>
</li>
<li><p>当虚拟机启动时,用户需指定一个要执行的主类(包含main()方法的那个类),虚拟机会先初始化这个主类</p>
</li>
</ol>
<p>例1:<br></p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClassInit</span> {</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">TestNewClass</span> {</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestNewClass</span>(<span class="params"></span>) </span>{</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"TestNewClass init....."</span>);</span><br><span class="line">    }</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>{</span><br><span class="line">    TestNewClass s = <span class="keyword">new</span> TestNewClass();</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>输出结果:<code>TestNewClass init.....</code></p>
<p>例2:<br>读取一个静态字段时<br></p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClassInit</span> {</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SupperClass</span> {</span><br><span class="line">   <span class="keyword">static</span> {</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"SupperClass init....."</span>);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="keyword">value</span> = <span class="string">"admol"</span>;</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SubClass</span> <span class="title">extends</span> <span class="title">SupperClass</span> {</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"SubClass init....."</span>);</span><br><span class="line">    }</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>{</span><br><span class="line">    <span class="comment">//读取一个类的静态字段时,初始化该类</span></span><br><span class="line">    System.<span class="keyword">out</span>.println(SubClass.<span class="keyword">value</span>);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>输出结果:<code>SupperClass init.....</code>,对于静态字段,只有直接定义这个字段的类才会被初始化,因此这里通过子类调用父类的静态字段,只会触发父类进行初始化.(可以给SupperClass 静态字段加一个final 再次进行测试)</p>
<p>例3:<br>当初始化一个类的时候,发现其父类没有初始化时先初始化其父类<br></p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClassInit</span> {</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SupperClass</span> {</span><br><span class="line">   <span class="keyword">static</span> {</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"SupperClass init....."</span>);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="keyword">value</span> = <span class="string">"admol"</span>;</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SubClass</span> <span class="title">extends</span> <span class="title">SupperClass</span> {</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"SubClass init....."</span>);</span><br><span class="line">    }</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>{</span><br><span class="line">    SubClass subClass = <span class="keyword">new</span> SubClass();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>输出结果:<br><code>SupperClass init.....</code><br><code>SubClass init.....</code></p>
<h2 id="类加载器">类加载器</h2><p>虚拟机设计团队把类加载阶段的”通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到java虚拟机外部去实现,以便让应用程序自己觉得如何去获取所需的类.实现这个动作的代码模块被称为<code>"类加载器"</code>.<br>站在java虚拟机的角度可以分为两种类加载器:1.启动类加载器(Bootstap ClassLoader) 2.其他类加载器<br>划分得更细致一些,大多数提供了三种类加载器:</p>
<ul>
<li>启动类加载器(Bootstrap ClassLoader): 这个类加载器主要负责加载<java_home>\lib目录下的类,或者被-Xbootclasspath 参数指定路径中的并被虚拟机识别的类.</java_home></li>
<li>扩展类加载器(Extension ClassLoader): 这个类加载器主要负责加载<java_home>\lib\ext目录中的类,或者被java.ext.dirs系统变量所指定路径中的所有类库.</java_home></li>
<li>应用程序类加载器(Application ClassLoader): 此类是ClassLoader类中的getSystemClassLoader()方法的返回值,一般称为系统类加载器,它负责架子啊用户类路径(ClassPath)上所指定的类库.</li>
</ul>
<p>类加载器之间关系图:<br><a href="http://ww1.sinaimg.cn/large/b47a2e43gw1f2xizbw69ej20mr0jl0uc.jpg" title="" class="fancybox" rel="article0"><img src="http://ww1.sinaimg.cn/large/b47a2e43gw1f2xizbw69ej20mr0jl0uc.jpg" alt=""></a><br>这种层次关系被称之为双亲委派模型,此模型要求除了顶层的启动类加载器外,其余类加载器都应有自己的父类加载器,如果一个类加载器收到了类加载请求,它首先不会自己去尝试加载这个类,而是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,只有当父类反馈自己无法完成这个类加载请求时,子类加载器才会尝试自己去加载.</p>
  
  </div>
      </div>

   </div> 
      <blockquote class="blockquote-reverse">
      <!-- <p>admol.net</p> -->
      <footer>蜀ICP备15007676号 <cite title="Source Title"> Copyright © 2016 adoml</cite></footer>
    </blockquote>
   </div> 



  <script src="js/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  </body>
</html>